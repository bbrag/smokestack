------
EJB Module Usage
------
  
  [[1]] Create MockEjbContainer

	<<<
	public final void testIncrement() throws InstantiationException, IllegalAccessException \{ \
		MockEJBContainer c\=new MockEJBContainer(); \
		CounterImpl c1\=c.getInstance(CounterImpl.class); \
		assertThat(c1.increment(), Is.is(1)); \
		CounterImpl c2\=c.getInstance(CounterImpl.class); \
		assertThat(c2.increment(), Is.is(2)); \
	\} >>>

  [[2]] For persistence

	<<<
	public final void testGetMovies() throws Exception \{ \
        new Expectations()\{ \
		@Mocked (methods\= \{"persist", "remove"\}) \
		MockEntityManager em; \
		@Mocked( methods\= \{"getResultList"\}) \
		MockBaseQuery q; \
       		 \{ \
        		em.persist(any); \
        		em.persist(any); \
        		em.persist(any); \
        		List<Movie> l1\=new ArrayList<Movie>(); \
        		l1.add(new Movie("Quentin Tarantino", "Reservoir Dogs", 1992)); \
        	        l1.add(new Movie("Joel Coen", "Fargo", 1996)); \
                	l1.add(new Movie("Joel Coen", "The Big Lebowski", 1998)); \
        		q.getResultList(); returns(l1); \
        		em.remove(any); \
        		em.remove(any); \
        		em.remove(any); \
        		List<Movie> l2\=new ArrayList<Movie>(); \
        		q.getResultList(); returns(l2); \
        	\} \
       \ }; \
        \
        MockEJBContainer container\=new MockEJBContainer(); \
        \
        Movies movies \= container.getInstance(MoviesImpl.class); \
		\
        movies.addMovie(new Movie("Quentin Tarantino", "Reservoir Dogs", 1992)); \
        movies.addMovie(new Movie("Joel Coen", "Fargo", 1996)); \
        movies.addMovie(new Movie("Joel Coen", "The Big Lebowski", 1998)); \
		\
        List<Movie> list \= movies.getMovies(); \
        assertEquals("List.size()", 3, list.size()); \
		\
        for (Movie movie : list) \{ \
            movies.deleteMovie(movie); \
        \} \
		\
        assertEquals("Movies.getMovies()", 0, movies.getMovies().size()); \
	\} >>>


  You can refer to the samples provided along with the source for more details.