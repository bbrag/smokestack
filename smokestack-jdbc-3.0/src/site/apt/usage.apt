------
JDBC Module Usage
------

	JDBC Module provides the following:
	[[1]] You can use Driver or Datasource implementation
	
	Example for Driver implementation
	
		* use the mockDriver
			Class.forName("com.github.smokestack.jdbc.MockDriver");	
		* call your method to be tested
		* Your asserts here
		* Get access to the mock connection object 
			<MockConnection c=MockDriver.instance.getMockConnections().get(0);> font. 
		* Assert that all is good with the container
			< c.assertExplicitClose(); > font.
	
	[[2]]Implementation with DataSource
	
		* Bind the mock datasource
			< MockDataSource ds = MockDataSource.getInstance();
			Context ctx = new InitialContext();
			ctx.bind("jdbc/dsName", ds); > font.
		* Call your method to be tested
		* Your asserts here
		* Get access to the mock connection object 
			< MockConnection c=MockDataSource.instance.getMockConnections().get(0);> font.
		* Assert that all is good with the container
			< c.assertClosed();> font.
	
	Note:
	
	*  It is important to understand how the JDBC drivers are loaded. When 
	Class.forName() is invoked to load the driver, the order in which 
	the MockDriver class is loaded is important. To ensure that the MockDriver
	is loaded, you would have to, in the test, do the following
	
	* Load the MockDriver using Class.forName
	
	* Load the actual driver using Class.forName
	
	This is only when you are using Driver and not DataSource.  

	You can refer to the samples provided along with the source for more details.